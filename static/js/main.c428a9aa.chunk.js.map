{"version":3,"sources":["components/grafico.js","App.js","serviceWorker.js","index.js"],"names":["divStyle","display","otroDivStyle","padding","titleStyle","Grafico","info","transado","buy","sell","extra","exchanges","stocks","listed_companies","info_exchanges","aux_exchanges","key","push","exchange_ticker","volumen_total","forEach","element","nombre_exchange","cantidad_acciones","length","nombre","stock","nombre_empresa","company_name","ticker","total","map","style","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","dato","Math","random","flex-direction","flex-wrap","alto","bajo","ultimo","variacion","id","round","socket","io","path","protocols","transports","on","emit","console","log","listStyle","center","App","useState","setData","estadisticas","setEstadisticas","informaciones","transados","setTransados","aux_transados","aux_transados2","setTransados2","setBuy","aux_buy","setSell","aux_sell","useEffect","currentData","value","volumen","volume","time","Date","toGMTString","lista_ticker","info_para_graficar","onClick","btn","document","getElementById","connected","disconnect","innerHTML","connect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iTA4JMA,EAAW,CACfC,QAAS,QAGLC,EAAe,CACnBC,QAAS,IAGLC,EAAa,CACjBD,QAAS,IAGIE,EA7JC,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OAK1DC,EAAmB,GACnBC,EAAiB,GACjBC,EAAgB,GACpB,IAAK,IAAMC,KAAOL,EAEhBE,EAAiBI,KAAjB,eACGN,EAAUK,GAAKE,gBAAkBP,EAAUK,GAAKH,mBAGrD,IAAIM,EAAgB,EAduD,WAehEH,GACTD,EAAcE,KAAKN,EAAUK,GAAKE,iBAElCL,EAAiBO,SAAQ,SAACC,GACxB,IAAIC,EAAkBX,EAAUK,GAAKE,gBAEjCG,EAAQC,KACVR,EAAeQ,GAAmB,GAClCR,EAAeQ,GAAiBC,kBAC9BF,EAAQC,GAAiBE,OAC3BV,EAAeQ,GAAiBd,IAAM,EACtCM,EAAeQ,GAAiBb,KAAO,EACvCK,EAAeQ,GAAiBG,OAASH,EACzCV,EAAOQ,SAAQ,SAACM,GACdL,EAAQC,GAAiBF,SAAQ,SAACO,GAC5BD,EAAME,eAAiBD,IAErBnB,EAAI,IAAMA,EAAI,GAAGkB,EAAMG,UACzBf,EAAeQ,GAAiBd,KAC9BA,EAAI,GAAGkB,EAAMG,QAAQtB,SACvBY,GAAiBX,EAAI,GAAGkB,EAAMG,QAAQtB,UAEpCE,EAAK,IAAMA,EAAK,GAAGiB,EAAMG,UAC3Bf,EAAeQ,GAAiBb,MAC9BA,EAAK,GAAGiB,EAAMG,QAAQtB,SACxBY,GAAiBV,EAAK,GAAGiB,EAAMG,QAAQtB,iBAM/CO,EAAeQ,GAAiBQ,MAC9BhB,EAAeQ,GAAiBd,IAChCM,EAAeQ,GAAiBb,UAjCxC,IAAK,IAAMO,KAAOL,EAAY,EAAnBK,GAwCX,OACE,6BACGV,EAAKyB,KAAI,SAACzB,GAAD,OACR,6BACE,wBAAI0B,MAAO5B,GAAaE,EAAK,GAAGuB,QAChC,yBAAKG,MAAOhC,GACV,kBAAC,IAAD,CACEiC,MAAO,IACPC,OAAQ,IACRC,KAAM7B,EACN8B,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IAGV,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEC,KAAK,WACLD,QAASpC,EAAK,GAAGuB,OACjBe,OAAO,UACPC,UAAW,CAAEC,EAAG,MAGnBpC,EAAMqB,KAAI,SAACgB,GACV,GAAIA,EAAKzC,EAAK,GAAGuB,QACf,OACE,yBACEb,IAAKgC,KAAKC,SACVhD,QAAQ,OACRiD,iBAAe,MACfC,YAAU,QAEV,kDAAqBJ,EAAKzC,EAAK,GAAGuB,QAAQuB,MAC1C,kDAAqBL,EAAKzC,EAAK,GAAGuB,QAAQwB,MAC1C,gDAAmBN,EAAKzC,EAAK,GAAGuB,QAAQyB,QACxC,uDACyBP,EAAKzC,EAAK,GAAGuB,QAAQ0B,UAD9C,SAOPhD,EAASwB,KAAI,SAACgB,GACb,GAAIA,EAAKzC,EAAK,GAAGuB,QACf,OACE,6BACE,gDAAsBkB,EAAKzC,EAAK,GAAGuB,QAAQtB,mBAQzD,yBAAKiD,GAAG,YAAYxB,MAAOhC,GACxBe,EAAcgB,KAAI,SAACgB,GAClB,GAAIA,EACF,OACE,yBAAKf,MAAO9B,GACV,wBAAI8B,MAAO5B,GACT,wCAAcU,EAAeiC,GAAMtB,SAErC,wCAAcX,EAAeiC,GAAMvC,KACnC,yCAAeM,EAAeiC,GAAMtC,MACpC,6CAAmBK,EAAeiC,GAAMjB,OACxC,oDACyBhB,EAAeiC,GAAMxB,mBAE9C,8CACgB,IACbyB,KAAKS,MACH3C,EAAeiC,GAAMjB,MAAQX,EAAiB,KAC7C,IAJN,YCtIVuC,EAASC,IAAG,iCAAkC,CAClDC,KAAM,UACNC,UAAW,SACXC,WAAY,CAAC,UAAW,eAGtBlD,EAAS,GACb8C,EAAOK,GAAG,UAAU,SAACzD,GACnBM,EAASN,KAEXoD,EAAOM,KAAK,SAAU,OAEtB,IAAIrD,EAAY,GAChB+C,EAAOK,GAAG,aAAa,SAACzD,GACtBK,EAAYL,EACZ2D,QAAQC,IAAIvD,MAEd+C,EAAOM,KAAK,YAAa,OAEzB,IA4JMhC,EAAQ,CACZI,OAAQ,KACRjC,QAAS,GACTgE,UAAW,OACXC,OAAQ,GAGKC,EAnKH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACTnC,EADS,KACHoC,EADG,OAEwBD,mBAAS,IAFjC,mBAETE,EAFS,KAEKC,EAFL,KAGZC,EAAgB,CAAC,IAHL,EAIkBJ,mBAAS,IAJ3B,mBAITK,EAJS,KAIEC,EAJF,KAKZC,EAAgB,CAAC,IACjBC,EAAiB,CAAC,IANN,EAOoBR,mBAAS,IAP7B,mBAOGS,GAPH,aAQMT,mBAAS,IARf,mBAQT9D,EARS,KAQJwE,EARI,KASZC,EAAU,CAAC,IATC,EAUQX,mBAAS,IAVjB,mBAUT7D,EAVS,KAUHyE,EAVG,KAWZC,EAAW,CAAC,IAEhBC,qBAAU,WACR1B,EAAOK,GAAG,UAAU,SAACzD,GACnBiE,GAAQ,SAACc,GAAD,4BAAqBA,GAArB,CAAkC/E,OAC1CoE,EAActD,SAAQ,SAACC,GACjBA,EAAQf,EAAKuB,SACfR,EAAQf,EAAKuB,QAAQ0B,UACnBP,KAAKS,OACDpC,EAAQf,EAAKuB,QAAQyB,OAAShD,EAAKgF,OAAS,IAAO,IAAM,KACzD,IACNjE,EAAQf,EAAKuB,QAAQyB,OAAShD,EAAKgF,MAC/BhF,EAAKgF,MAAQjE,EAAQf,EAAKuB,QAAQwB,OACpChC,EAAQf,EAAKuB,QAAQwB,KAAO/C,EAAKgF,OAE/BhF,EAAKgF,MAAQjE,EAAQf,EAAKuB,QAAQuB,OACpC/B,EAAQf,EAAKuB,QAAQuB,KAAO9C,EAAKgF,SAGnCjE,EAAQf,EAAKuB,QAAU,GACvBR,EAAQf,EAAKuB,QAAQ0D,QAAU,EAC/BlE,EAAQf,EAAKuB,QAAQuB,KAAO9C,EAAKgF,MACjCjE,EAAQf,EAAKuB,QAAQwB,KAAO/C,EAAKgF,MACjCjE,EAAQf,EAAKuB,QAAQyB,OAAShD,EAAKgF,MACnCjE,EAAQf,EAAKuB,QAAQ0B,UAAY,EACjClC,EAAQf,EAAKuB,QAAQA,OAASvB,EAAKuB,WAGvC4C,EAAgBC,MAIlBhB,EAAOK,GAAG,OAAO,SAACzD,GAChBuE,EAAczD,SAAQ,SAACC,GACjBA,EAAQf,EAAKuB,QACfR,EAAQf,EAAKuB,QAAQtB,UAAYD,EAAKkF,QAEtCnE,EAAQf,EAAKuB,QAAU,GACvBR,EAAQf,EAAKuB,QAAQA,OAASvB,EAAKuB,OACnCR,EAAQf,EAAKuB,QAAQtB,SAAWD,EAAKkF,WAGzCP,EAAQ7D,SAAQ,SAACC,GACXA,EAAQf,EAAKuB,QACfR,EAAQf,EAAKuB,QAAQtB,UAAYD,EAAKkF,QAEtCnE,EAAQf,EAAKuB,QAAU,GACvBR,EAAQf,EAAKuB,QAAQA,OAASvB,EAAKuB,OACnCR,EAAQf,EAAKuB,QAAQtB,SAAWD,EAAKkF,WAGzCZ,EAAaC,GACbG,EAAOC,MAKTvB,EAAOK,GAAG,QAAQ,SAACzD,GACjBwE,EAAe1D,SAAQ,SAACC,GAClBA,EAAQf,EAAKuB,QACfR,EAAQf,EAAKuB,QAAQtB,UAAYD,EAAKkF,QAEtCnE,EAAQf,EAAKuB,QAAU,GACvBR,EAAQf,EAAKuB,QAAQA,OAASvB,EAAKuB,OACnCR,EAAQf,EAAKuB,QAAQtB,SAAWD,EAAKkF,WAGrCX,EAAc,GAAGvE,EAAKuB,UACxBgD,EAAc,GAAGvE,EAAKuB,QAAQtB,UAAYD,EAAKkF,QAEjDL,EAAS/D,SAAQ,SAACC,GACZA,EAAQf,EAAKuB,QACfR,EAAQf,EAAKuB,QAAQtB,UAAYD,EAAKkF,QAEtCnE,EAAQf,EAAKuB,QAAU,GACvBR,EAAQf,EAAKuB,QAAQA,OAASvB,EAAKuB,OACnCR,EAAQf,EAAKuB,QAAQtB,SAAWD,EAAKkF,WAGzCT,EAAcD,GACdF,EAAaC,GACbK,EAAQC,QAET,IACHhD,EAAKf,SAAQ,SAACC,GACZA,EAAQoE,KAAO,IAAIC,KAAKrE,EAAQoE,MAChCpE,EAAQoE,KAAOpE,EAAQoE,KAAKE,cAC5BtE,EAAQA,EAAQQ,QAAUR,EAAQiE,SAEpC,IAAIM,EAAe,GACnBzD,EAAKf,SAAQ,SAACC,GACZT,EAAOQ,SAAQ,SAACM,GACVA,EAAMG,SAAWR,EAAQQ,SACvB+D,EAAavE,EAAQQ,QACvB+D,EAAavE,EAAQQ,QAArB,sBACK+D,EAAavE,EAAQQ,SAD1B,CAEER,IAGFuE,EAAavE,EAAQQ,QAAU,CAACR,UAMxC,IAAIwE,EAAqB,GACzB,IAAK,IAAI7E,KAAO4E,EACdC,EAAmB5E,KAAK2E,EAAa5E,IAcvC,OACE,6BACE,4BACE2B,KAAK,SACLmD,QAfN,WACE,IAAIC,EAAMC,SAASC,eAAe,SAC9BvC,EAAOwC,WACTxC,EAAOyC,aACPJ,EAAIK,UAAY,YAEhB1C,EAAO2C,UACPN,EAAIK,UAAY,WASdd,MAAM,SACN9B,GAAG,QACHxB,MAAOA,GALT,UASA,kBAAC,EAAD,CACE1B,KAAMuF,EACNtF,SAAUoE,EACVnE,IAAKA,EACLC,KAAMA,EACNC,MAAO8D,EACP5D,OAAQA,EACRD,UAAWA,MCnKC2F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASC,eAAe,SDyHpB,kBAAmBa,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.c428a9aa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Line,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\nconst Grafico = ({ info, transado, buy, sell, extra, exchanges, stocks }) => {\r\n  //console.log(buy);\r\n  // console.log(sell);\r\n  //console.log(exchanges);\r\n  //console.log(stocks);\r\n  var listed_companies = [];\r\n  var info_exchanges = [];\r\n  var aux_exchanges = [];\r\n  for (const key in exchanges) {\r\n    //listed_companies = [...listed_companies, exchanges[key].listed_companies];\r\n    listed_companies.push({\r\n      [exchanges[key].exchange_ticker]: exchanges[key].listed_companies,\r\n    });\r\n  }\r\n  var volumen_total = 0;\r\n  for (const key in exchanges) {\r\n    aux_exchanges.push(exchanges[key].exchange_ticker);\r\n\r\n    listed_companies.forEach((element) => {\r\n      var nombre_exchange = exchanges[key].exchange_ticker;\r\n\r\n      if (element[nombre_exchange]) {\r\n        info_exchanges[nombre_exchange] = {};\r\n        info_exchanges[nombre_exchange].cantidad_acciones =\r\n          element[nombre_exchange].length;\r\n        info_exchanges[nombre_exchange].buy = 0;\r\n        info_exchanges[nombre_exchange].sell = 0;\r\n        info_exchanges[nombre_exchange].nombre = nombre_exchange;\r\n        stocks.forEach((stock) => {\r\n          element[nombre_exchange].forEach((nombre_empresa) => {\r\n            if (stock.company_name === nombre_empresa) {\r\n              //console.log(buy);\r\n              if (buy[0] && buy[0][stock.ticker]) {\r\n                info_exchanges[nombre_exchange].buy +=\r\n                  buy[0][stock.ticker].transado;\r\n                volumen_total += buy[0][stock.ticker].transado;\r\n              }\r\n              if (sell[0] && sell[0][stock.ticker]) {\r\n                info_exchanges[nombre_exchange].sell +=\r\n                  sell[0][stock.ticker].transado;\r\n                volumen_total += sell[0][stock.ticker].transado;\r\n              }\r\n            }\r\n          });\r\n        });\r\n\r\n        info_exchanges[nombre_exchange].total =\r\n          info_exchanges[nombre_exchange].buy +\r\n          info_exchanges[nombre_exchange].sell;\r\n      }\r\n    });\r\n  }\r\n  //console.log(aux_exchanges);\r\n  //console.log(listed_companies);\r\n  //setInfo_para_exchanges(info_exchanges);\r\n  return (\r\n    <div>\r\n      {info.map((info) => (\r\n        <div>\r\n          <h1 style={titleStyle}>{info[0].ticker}</h1>\r\n          <div style={divStyle}>\r\n            <LineChart\r\n              width={500}\r\n              height={300}\r\n              data={info}\r\n              margin={{\r\n                top: 5,\r\n                right: 30,\r\n                left: 30,\r\n                bottom: 5,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"time\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey={info[0].ticker}\r\n                stroke=\"#8884d8\"\r\n                activeDot={{ r: 8 }}\r\n              />\r\n            </LineChart>\r\n            {extra.map((dato) => {\r\n              if (dato[info[0].ticker]) {\r\n                return (\r\n                  <div\r\n                    key={Math.random()}\r\n                    display=\"flex\"\r\n                    flex-direction=\"row\"\r\n                    flex-wrap=\"wrap\"\r\n                  >\r\n                    <p>Precio más alto: {dato[info[0].ticker].alto}</p>\r\n                    <p>Precio más bajo: {dato[info[0].ticker].bajo}</p>\r\n                    <p>Último precio: {dato[info[0].ticker].ultimo}</p>\r\n                    <p>\r\n                      Variación porcentual: {dato[info[0].ticker].variacion}%\r\n                    </p>\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n            {transado.map((dato) => {\r\n              if (dato[info[0].ticker]) {\r\n                return (\r\n                  <div>\r\n                    <p>Volumen transado: {dato[info[0].ticker].transado}</p>\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <div id=\"exchanges\" style={divStyle}>\r\n        {aux_exchanges.map((dato) => {\r\n          if (dato) {\r\n            return (\r\n              <div style={otroDivStyle}>\r\n                <h1 style={titleStyle}>\r\n                  <p>Exchange: {info_exchanges[dato].nombre}</p>\r\n                </h1>\r\n                <p>Suma Buy: {info_exchanges[dato].buy}</p>\r\n                <p>Suma Sell: {info_exchanges[dato].sell}</p>\r\n                <p>Volumen Total: {info_exchanges[dato].total}</p>\r\n                <p>\r\n                  Cantidad de acciones: {info_exchanges[dato].cantidad_acciones}\r\n                </p>\r\n                <p>\r\n                  Participación{\" \"}\r\n                  {Math.round(\r\n                    (info_exchanges[dato].total / volumen_total) * 10000\r\n                  ) / 100}\r\n                  %\r\n                </p>\r\n              </div>\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst divStyle = {\r\n  display: \"flex\",\r\n};\r\n\r\nconst otroDivStyle = {\r\n  padding: 50,\r\n};\r\n\r\nconst titleStyle = {\r\n  padding: 30,\r\n};\r\n\r\nexport default Grafico;\r\n","import React, { Component, useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./App.css\";\nimport Grafico from \"./components/grafico\";\nimport {} from \"recharts\";\n\nconst socket = io(\"wss://le-18262636.bitzonte.com\", {\n  path: \"/stocks\",\n  protocols: \"wss://\",\n  transports: [\"polling\", \"websocket\"],\n});\n\nvar stocks = [];\nsocket.on(\"STOCKS\", (info) => {\n  stocks = info;\n});\nsocket.emit(\"STOCKS\", \"oli\");\n\nvar exchanges = [];\nsocket.on(\"EXCHANGES\", (info) => {\n  exchanges = info;\n  console.log(exchanges);\n});\nsocket.emit(\"EXCHANGES\", \"oli\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [estadisticas, setEstadisticas] = useState([]);\n  var informaciones = [{}];\n  const [transados, setTransados] = useState([]);\n  var aux_transados = [{}];\n  var aux_transados2 = [{}];\n  const [transados2, setTransados2] = useState([]);\n  const [buy, setBuy] = useState([]);\n  var aux_buy = [{}];\n  const [sell, setSell] = useState([]);\n  var aux_sell = [{}];\n\n  useEffect(() => {\n    socket.on(\"UPDATE\", (info) => {\n      setData((currentData) => [...currentData, info]);\n      informaciones.forEach((element) => {\n        if (element[info.ticker]) {\n          element[info.ticker].variacion =\n            Math.round(\n              ((element[info.ticker].ultimo - info.value) / 100) * 100 * 100\n            ) / 100;\n          element[info.ticker].ultimo = info.value;\n          if (info.value < element[info.ticker].bajo) {\n            element[info.ticker].bajo = info.value;\n          }\n          if (info.value > element[info.ticker].alto) {\n            element[info.ticker].alto = info.value;\n          }\n        } else {\n          element[info.ticker] = {};\n          element[info.ticker].volumen = 0; //suma compra y venta\n          element[info.ticker].alto = info.value;\n          element[info.ticker].bajo = info.value;\n          element[info.ticker].ultimo = info.value;\n          element[info.ticker].variacion = 0;\n          element[info.ticker].ticker = info.ticker;\n        }\n      });\n      setEstadisticas(informaciones);\n      //console.log(informaciones);\n    });\n\n    socket.on(\"BUY\", (info) => {\n      aux_transados.forEach((element) => {\n        if (element[info.ticker]) {\n          element[info.ticker].transado += info.volume;\n        } else {\n          element[info.ticker] = {};\n          element[info.ticker].ticker = info.ticker;\n          element[info.ticker].transado = info.volume;\n        }\n      });\n      aux_buy.forEach((element) => {\n        if (element[info.ticker]) {\n          element[info.ticker].transado += info.volume;\n        } else {\n          element[info.ticker] = {};\n          element[info.ticker].ticker = info.ticker;\n          element[info.ticker].transado = info.volume;\n        }\n      });\n      setTransados(aux_transados);\n      setBuy(aux_buy);\n      //console.log(aux_buy);\n    });\n\n    //var aux_transados2 = [];\n    socket.on(\"SELL\", (info) => {\n      aux_transados2.forEach((element) => {\n        if (element[info.ticker]) {\n          element[info.ticker].transado += info.volume;\n        } else {\n          element[info.ticker] = {};\n          element[info.ticker].ticker = info.ticker;\n          element[info.ticker].transado = info.volume;\n        }\n      });\n      if (aux_transados[0][info.ticker]) {\n        aux_transados[0][info.ticker].transado += info.volume; //suma de buy total + sell de update\n      }\n      aux_sell.forEach((element) => {\n        if (element[info.ticker]) {\n          element[info.ticker].transado += info.volume;\n        } else {\n          element[info.ticker] = {};\n          element[info.ticker].ticker = info.ticker;\n          element[info.ticker].transado = info.volume;\n        }\n      });\n      setTransados2(aux_transados2);\n      setTransados(aux_transados);\n      setSell(aux_sell);\n    });\n  }, []);\n  data.forEach((element) => {\n    element.time = new Date(element.time);\n    element.time = element.time.toGMTString();\n    element[element.ticker] = element.value;\n  });\n  var lista_ticker = {};\n  data.forEach((element) => {\n    stocks.forEach((stock) => {\n      if (stock.ticker === element.ticker) {\n        if (lista_ticker[element.ticker]) {\n          lista_ticker[element.ticker] = [\n            ...lista_ticker[element.ticker],\n            element,\n          ];\n        } else {\n          lista_ticker[element.ticker] = [element];\n        }\n      }\n    });\n  });\n\n  var info_para_graficar = [];\n  for (var key in lista_ticker) {\n    info_para_graficar.push(lista_ticker[key]);\n  }\n\n  function handleClick() {\n    var btn = document.getElementById(\"boton\");\n    if (socket.connected) {\n      socket.disconnect();\n      btn.innerHTML = \"Prender\";\n    } else {\n      socket.connect();\n      btn.innerHTML = \"Apagar\";\n    }\n  }\n\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        onClick={handleClick}\n        value=\"Apagar\"\n        id=\"boton\"\n        style={style}\n      >\n        Apagar\n      </button>\n      <Grafico\n        info={info_para_graficar}\n        transado={transados}\n        buy={buy}\n        sell={sell}\n        extra={estadisticas}\n        stocks={stocks}\n        exchanges={exchanges}\n      />\n    </div>\n  );\n};\n\nconst style = {\n  margin: \"10\",\n  padding: 10,\n  listStyle: \"none\",\n  center: 1,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}