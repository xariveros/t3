{"version":3,"sources":["components/grafico.js","App.js","serviceWorker.js","index.js"],"names":["divStyle","display","titleStyle","padding","Grafico","info","transado","extra","forEach","element","map","style","ticker","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","dato","key","Math","random","flex-direction","flex-wrap","alto","bajo","ultimo","variacion","socket","io","path","protocols","transports","stocks","on","emit","listStyle","center","App","useState","setData","estadisticas","setEstadisticas","informaciones","transados","setTransados","aux_transados","useEffect","currentData","round","value","volumen","volume","time","Date","toGMTString","lista_ticker","stock","info_para_graficar","push","onClick","btn","document","getElementById","connected","disconnect","innerHTML","connect","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.394d147b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Line,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\nconst Grafico = ({ info, transado, extra }) => {\r\n  extra.forEach((element) => {\r\n    // console.log(element);\r\n  });\r\n  return (\r\n    <div>\r\n      {/* {extra[0][\"IBM\"].alto} */}\r\n      {info.map((info) => (\r\n        <div>\r\n          <h1 style={titleStyle}>{info[0].ticker}</h1>\r\n          <div style={divStyle}>\r\n            <LineChart\r\n              width={500}\r\n              height={300}\r\n              data={info}\r\n              margin={{\r\n                top: 5,\r\n                right: 30,\r\n                left: 30,\r\n                bottom: 5,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"time\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey={info[0].ticker}\r\n                stroke=\"#8884d8\"\r\n                activeDot={{ r: 8 }}\r\n              />\r\n            </LineChart>\r\n            {extra.map((dato) => {\r\n              if (dato[info[0].ticker]) {\r\n                return (\r\n                  <div\r\n                    key={Math.random()}\r\n                    display=\"flex\"\r\n                    flex-direction=\"row\"\r\n                    flex-wrap=\"wrap\"\r\n                  >\r\n                    <p>Precio más alto: {dato[info[0].ticker].alto}</p>\r\n                    <p>Precio más bajo: {dato[info[0].ticker].bajo}</p>\r\n                    <p>Último precio: {dato[info[0].ticker].ultimo}</p>\r\n                    <p>\r\n                      Variación porcentual: {dato[info[0].ticker].variacion}%\r\n                    </p>\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n            {transado.map((dato) => {\r\n              if (dato[info[0].ticker]) {\r\n                return (\r\n                  <div>\r\n                    <p>Volumen transado: {dato[info[0].ticker].transado}</p>\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst divStyle = {\r\n  display: \"flex\",\r\n};\r\n\r\nconst titleStyle = {\r\n  padding: 50,\r\n};\r\n\r\nexport default Grafico;\r\n","import React, { Component, useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./App.css\";\nimport Grafico from \"./components/grafico\";\nimport {} from \"recharts\";\n\nconst socket = io(\"wss://le-18262636.bitzonte.com\", {\n  path: \"/stocks\",\n  protocols: \"wss://\",\n  transports: [\"polling\", \"websocket\"],\n});\n\nvar stocks = [];\nsocket.on(\"STOCKS\", (info) => {\n  stocks = info;\n});\nsocket.emit(\"STOCKS\", \"oli\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  //const [informaciones, setInformaciones] = useState([]);\n  const [estadisticas, setEstadisticas] = useState([]);\n  var informaciones = [{}];\n  const [transados, setTransados] = useState([]);\n  var aux_transados = [{}];\n  // var lista = [\n  //   {\n  //     twt: { max: 1, min: 2, transado: 3 },\n  //     fb: { max: 1, min: 2, transado: 3 },\n  //   },\n  // ];\n\n  useEffect(() => {\n    socket.on(\"UPDATE\", (info) => {\n      setData((currentData) => [...currentData, info]);\n      informaciones.forEach((element) => {\n        //console.log(\"entro aki\");\n        //element es objeto\n        if (element[info.ticker]) {\n          element[info.ticker].variacion =\n            Math.round(\n              ((element[info.ticker].ultimo - info.value) / 100) * 100 * 100\n            ) / 100;\n          element[info.ticker].ultimo = info.value;\n          if (info.value < element[info.ticker].bajo) {\n            element[info.ticker].bajo = info.value;\n          }\n          if (info.value > element[info.ticker].alto) {\n            element[info.ticker].alto = info.value;\n          }\n        } else {\n          element[info.ticker] = {};\n          element[info.ticker].volumen = 0; //suma compra y venta\n          element[info.ticker].alto = info.value;\n          element[info.ticker].bajo = info.value;\n          element[info.ticker].ultimo = info.value;\n          element[info.ticker].variacion = 0;\n          element[info.ticker].ticker = info.ticker;\n        }\n      });\n      setEstadisticas(informaciones);\n    });\n    var aux = [];\n    //console.log(aux);\n    socket.on(\"BUY\", (info) => {\n      //console.log(info);\n      aux_transados.forEach((element) => {\n        if (element[info.ticker]) {\n          element[info.ticker].transado += info.volume;\n        } else {\n          element[info.ticker] = {};\n          element[info.ticker].ticker = info.ticker;\n          element[info.ticker].transado = info.volume;\n        }\n      });\n      setTransados(aux_transados);\n    });\n    // socket.on(\"SELL\", (info) => {});\n  }, []);\n\n  data.forEach((element) => {\n    element.time = new Date(element.time);\n    element.time = element.time.toGMTString();\n    element[element.ticker] = element.value;\n  });\n  var lista_ticker = {};\n  data.forEach((element) => {\n    stocks.forEach((stock) => {\n      if (stock.ticker === element.ticker) {\n        if (lista_ticker[element.ticker]) {\n          lista_ticker[element.ticker] = [\n            ...lista_ticker[element.ticker],\n            element,\n          ];\n        } else {\n          lista_ticker[element.ticker] = [element];\n        }\n      }\n    });\n  });\n\n  var info_para_graficar = [];\n  for (var key in lista_ticker) {\n    info_para_graficar.push(lista_ticker[key]);\n  }\n\n  function handleClick() {\n    var btn = document.getElementById(\"boton\");\n    if (socket.connected) {\n      socket.disconnect();\n      btn.innerHTML = \"Prender\";\n    } else {\n      socket.connect();\n      btn.innerHTML = \"Apagar\";\n    }\n  }\n\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        onClick={handleClick}\n        value=\"Apagar\"\n        id=\"boton\"\n        style={style}\n      >\n        Apagar\n      </button>\n      <Grafico\n        info={info_para_graficar}\n        transado={transados}\n        extra={estadisticas}\n      />\n    </div>\n  );\n};\n\nconst style = {\n  margin: \"10\",\n  padding: 10,\n  listStyle: \"none\",\n  center: 1,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}